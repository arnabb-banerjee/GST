@model BusinessObjects.FunctionInfo


<script type="text/javascript">

    function Save_Function(isDelete) {
        if ($("#txtName").val().trim().replace("&nbsp;", "") == "")
        {
            alert("Name is mandatory for a record");
            return false;
        }

        var roles = "";

        $("#body_role_list").find("input[type=checkbox]").each(function () {
            if (this.checked) {
                roles += (roles.length > 0 ? "," : "") + this.id;
            }
        });

        //alert(roles);

        if (roles.trim().replace("&nbsp;", "") == "")
        {
            alert("Selection of at least one role is mandatory");
            return false;
        }

        var dataarray = {
            "isOnlyDelete": isDelete
        , "FunctionId": $("#hdnFunctionID").val()
        , "FunctionName": $("#txtName").val()
        , "IsForModerate": ($("#chkIsForModerate").prop('checked') ? "Y" : "")
        , "IsForMembership": ($("#chkIsForMembership").prop('checked') ? "Y" : "")
        , "IsDesignation": ($("#chkIsDesignation").prop('checked') ? "Y" : "")
        , "isActive": ($("#chkIsActive").prop('checked') ? "Y" : "")
        , "IsDefaultForModerateUser": ($("#chkIsDefaultForModerateUser").prop('checked') ? "Y" : "")
        , "IsDefaultForRegisteredUser": ($("#chkIsDefaultForRegisteredUser").prop('checked') ? "Y" : "")
        , "Roles": roles
        }

        $.ajax({
            cache: false,
            type: "POST",
            url: "/functionsave",
            data: dataarray,
            success: function (data) {
                if (isDelete == "Y") {
                    alert("Data deleted");
                } else {
                    alert("Data updated");
                }
                MakeAllControlsBlank();
                CloseParentPopup();
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert(xhr.responseText);

            }
        });
    }

    function MakeAllControlsBlank() {

        $('input[type="text"]').each(function () {
            $(this).val('');
        });

        $("#chkIsActive").attr('checked', true);
    }

    $(document).ready(function () {
        $("#txtDueInFixedNumberDays").keydown(function (e) { FilterKeys("I", e, $(this)); });
        $("#txtDueInCertainDayOfMonth").keydown(function (e) { FilterKeys("I", e, $(this)); });
        $("#txtDueInNextMonth").keydown(function (e) { FilterKeys("I", e, $(this)); });
        $("#txtDiscount").keydown(function (e) { FilterKeys("numeric", e, $(this)); });
    });

    function FilterKeys(e, type) {
        // Allow: backspace, delete, tab, escape, enter and .
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110]) !== -1 ||
            // Allow: Ctrl+A, Command+A
            (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, down, up
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            // let it happen, don't do anything
            return;
        }

        if (type == "AN") {
            if ((e.keyCode > 64 && e.keyCode < 91)) {
                return;
            }
            if (e.shiftKey && (e.keyCode > 64 && e.keyCode < 91)) {
                return;
            }
        }
        if (type == "I" || type == "N" || type == "Mob") {
            if (type == "Mob" && (e.keyCode == 107 || e.keyCode == 32)) {
                return;
            }
            if (type == "N" && e.keyCode == 119) {
                return;
            }
            if (((e.keyCode > 48 && e.keyCode < 57)) || (e.keyCode > 96 && e.keyCode < 105)) {
                return;
            }
        }

        //if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
        //    e.preventDefault();
        //}

        e.preventDefault();
    }

</script>



<div class="portlet-body form">
    @Html.HiddenFor(m => m.FunctionId, new { @id = "hdnFunctionID" })
    <div class="form-body">
        <div class="form-group">
            <label class="control-label">Name</label>
            @Html.TextBoxFor(m => m.FunctionName, new { @id = "txtName", @class = "form-control", @placeholder = "First name" })
            <div class="form-control-focus"> </div>
        </div>
        <div class="form-group">
            <div class="mt-checkbox-inline">
                <label class="mt-checkbox">
                    Is Membership View?&nbsp;&nbsp;<input type="checkbox" id="chkIsForMembership" class="checkbox" @(Model.IsForMembership.Trim().ToUpper() == "Y" ? "checked=\"checked\"" : "") />
                    <span></span>
                </label>
            </div>
        </div>
        <div class="form-group">
            <div class="mt-checkbox-inline">
                <label class="mt-checkbox">
                    Will represent a designation&nbsp;&nbsp;<input type="checkbox" id="chkIsDesignation" class="checkbox" @(Model.IsDesignation.Trim().ToUpper() == "Y" ? "checked=\"checked\"" : "") />
                    <span></span>
                </label>
            </div>
        </div>
        <div class="form-group">
            <div class="mt-checkbox-inline">
                <label class="mt-checkbox">
                    For Moderate User only&nbsp;&nbsp;<input type="checkbox" id="chkIsForModerate" class="checkbox" @(Model.IsForModerate.Trim().ToUpper() == "Y" ? "checked=\"checked\"" : "")/>
                    <span></span>
                </label>
            </div>
        </div>
        <div class="form-group">
            <div class="mt-checkbox-inline">
                <label class="mt-checkbox">
                    Is Active?&nbsp;&nbsp;<input type="checkbox" id="chkIsActive" checked="checked" class="checkbox" />
                    <span></span>
                </label>
            </div>
        </div>
        <div class="form-group">
            <div class="mt-checkbox-inline">
                <label class="mt-checkbox">
                    Is default for registered user?&nbsp;&nbsp;<input type="checkbox" id="chkIsDefaultForRegisteredUser" class="checkbox" @(Model.IsDefaultForRegisteredUser ? "checked=\"checked\"" : "") />
                    <span></span>
                </label>
            </div>
        </div>
        <div class="form-group">
            <div class="mt-checkbox-inline">
                <label class="mt-checkbox">
                    Is default for moderate user?&nbsp;&nbsp;<input type="checkbox" id="chkIsDefaultForModerateUser" class="checkbox" @(Model.IsDefaultForModerateUser ? "checked=\"checked\"" : "")/>
                    <span></span>
                </label>
            </div>
        </div>
        <div class="form-group">
            <label class="control-label">Applicable Role List</label>
            <div class="form-control-focus"> </div>
        </div>

        <div class="form-group">
            <label class="control-label">Name</label>
            @if (Model.RoleList != null)
            {
                <table class="table table-striped table-bordered table-hover" id="sample_3">
                    <thead>
                        <tr>
                            <th>Select</th>
                            <th>Name</th>
                        </tr>
                    </thead>
                    <tbody id="body_role_list">
                        @foreach (BusinessObjects.RoleInfo obj in Model.RoleList)
                        {
                            <tr>
                                <td><input type="checkbox" id="@obj.RoleID" class="checkbox" @(obj.isSelected ? "checked=\"checked\"" : "") /></td>
                                <td>@obj.RoleName</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="col-md-6">
                    No data to be previewed
                </div>
            }
            <div class="form-control-focus"> </div>

        </div>

    </div>
    <div class="form-actions">
        <input type="button" id="uiSaveFunction" value="Submit" class="btn green-meadow" onclick="return Save_Function('');" />
        <input type="submit" id="uiDeleteFunction" value="Delete" class="btn red-mint" onclick="return Save_Function('Y');" />
        <input type="button" value="Close" class="btn yellow" onclick="closepopup();" />
    </div>
</div>
